{"meta":{"title":"晓琳","subtitle":"","description":"","author":"晓琳","url":"https://codelin666.github.io","root":"/"},"pages":[{"title":"tags","date":"2020-07-12T06:49:27.000Z","updated":"2020-07-12T07:01:03.361Z","comments":true,"path":"tags/index.html","permalink":"https://codelin666.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"mybatis中使用逆向工程","slug":"mybatis中使用逆向工程","date":"2020-10-28T04:50:38.808Z","updated":"2020-10-28T04:47:05.560Z","comments":true,"path":"2020/10/28/mybatis中使用逆向工程/","link":"","permalink":"https://codelin666.github.io/2020/10/28/mybatis%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/","excerpt":"","text":"mybatis中使用逆向工程 首先导入maven 12345678910111213141516171819202122232425&lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;&#x2F;artifactId&gt; &lt;version&gt;1.3.7&lt;&#x2F;version&gt; &lt;configuration&gt; &lt;verbose&gt;true&lt;&#x2F;verbose&gt; &lt;overwrite&gt;true&lt;&#x2F;overwrite&gt; &lt;configurationFile&gt; src&#x2F;main&#x2F;resources&#x2F;generatorConfig.xml &lt;&#x2F;configurationFile&gt; &lt;&#x2F;configuration&gt; &lt;dependencies&gt; &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.mybatis.generator&#x2F;mybatis-generator-core --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt; &lt;artifactId&gt;mybatis-generator-core&lt;&#x2F;artifactId&gt; &lt;version&gt;1.3.7&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt; &lt;version&gt;8.0.15&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;&#x2F;dependencies&gt; &lt;&#x2F;plugin&gt; 建立generatorconfig.xml，然后输入以下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD MyBatis Generator Configuration 1.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt; &lt;context id&#x3D;&quot;testTables&quot; targetRuntime&#x3D;&quot;MyBatis3&quot;&gt; &lt;commentGenerator&gt; &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt; &lt;property name&#x3D;&quot;suppressAllComments&quot; value&#x3D;&quot;true&quot; &#x2F;&gt; &lt;&#x2F;commentGenerator&gt; &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt; &lt;jdbcConnection driverClass&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot; connectionURL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;employee?serverTimezone&#x3D;UTC&quot; userId&#x3D;&quot;root&quot; password&#x3D;&quot;0606&quot;&gt; &lt;property name&#x3D;&quot;nullCatalogMeansCurrent&quot; value&#x3D;&quot;true&quot;&gt;&lt;&#x2F;property&gt; &lt;&#x2F;jdbcConnection&gt; &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal --&gt; &lt;javaTypeResolver&gt; &lt;property name&#x3D;&quot;forceBigDecimals&quot; value&#x3D;&quot;false&quot; &#x2F;&gt; &lt;&#x2F;javaTypeResolver&gt; &lt;!-- targetProject:生成PO类的位置 --&gt; &lt;javaModelGenerator targetPackage&#x3D;&quot;com.generatodemo.my01.demo.pojo&quot; targetProject&#x3D;&quot;.\\src\\main\\java&quot;&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt; &lt;!-- 从数据库返回的值被清理前后的空格 --&gt; &lt;property name&#x3D;&quot;trimStrings&quot; value&#x3D;&quot;true&quot; &#x2F;&gt; &lt;&#x2F;javaModelGenerator&gt; &lt;!-- targetProject:mapper映射文件生成的位置 --&gt; &lt;sqlMapGenerator targetPackage&#x3D;&quot;com.mapper&quot; targetProject&#x3D;&quot;.\\src\\main\\resources&quot;&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt; &lt;&#x2F;sqlMapGenerator&gt; &lt;!-- targetPackage：mapper接口生成的位置 --&gt; &lt;javaClientGenerator type&#x3D;&quot;XMLMAPPER&quot; targetPackage&#x3D;&quot;com.generatodemo.my01.demo.pojo.mapper&quot; targetProject&#x3D;&quot;.\\src\\main\\java&quot;&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt; &lt;&#x2F;javaClientGenerator&gt; &lt;!-- 指定数据库表 --&gt; &lt;!-- &lt;table schema&#x3D;&quot;&quot; tableName&#x3D;&quot;tb_item&quot; domainObjectName&#x3D;&quot;Item&quot;&gt;&lt;&#x2F;table&gt; domainObjectName 可以配置生成的pojo名字 如不需要example类添加下面四个属性 enableCountByExample&#x3D;&quot;false&quot; enableDeleteByExample&#x3D;&quot;false&quot; enableSelectByExample&#x3D;&quot;false&quot; enableUpdateByExample&#x3D;&quot;false&quot;&gt;&lt;&#x2F;table&gt;--&gt; &lt;table schema&#x3D;&quot;&quot; tableName&#x3D;&quot;employee&quot; domainObjectName&#x3D;&quot;employee&quot; enableCountByExample&#x3D;&quot;false&quot; enableDeleteByExample&#x3D;&quot;false&quot; enableSelectByExample&#x3D;&quot;false&quot; enableUpdateByExample&#x3D;&quot;false&quot;&gt;&lt;&#x2F;table&gt; &lt;table schema&#x3D;&quot;&quot; tableName&#x3D;&quot;department&quot; domainObjectName&#x3D;&quot;department&quot; enableCountByExample&#x3D;&quot;false&quot; enableDeleteByExample&#x3D;&quot;false&quot; enableSelectByExample&#x3D;&quot;false&quot; enableUpdateByExample&#x3D;&quot;false&quot;&gt;&lt;&#x2F;table&gt; &lt;&#x2F;context&gt;&lt;&#x2F;generatorConfiguration&gt; 最后点击 就可以在目录中创建对应的文件了","categories":[],"tags":[]},{"title":"JAVA中实现Singleton模式","slug":"JAVA中实现Singleton模式","date":"2020-07-19T06:42:00.084Z","updated":"2020-07-19T06:41:43.119Z","comments":true,"path":"2020/07/19/JAVA中实现Singleton模式/","link":"","permalink":"https://codelin666.github.io/2020/07/19/JAVA%E4%B8%AD%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"JAVA中实现Singleton模式单例模式可以保证系统中，应用该模式的类一个类只有一个实例。即一个类只有一个对象实例。 单例模式写法双重检查Double-Checkpublic class Singleton { private static volatile Singleton singleton; private Singleton() {} public static Singleton getInstance() { if (singleton == null) { synchronized (Singleton.class) { if (singleton == null) { singleton = new Singleton(); } } } return singleton; } }volatile关键字千万不能掉，禁止指令重排序优化 静态内部类public class Singleton { private Singleton() {} private static class SingletonInstance { private static final Singleton INSTANCE = new Singleton(); } public static Singleton getInstance() { return SingletonInstance.INSTANCE; } }这种方式跟饿汉式方式采用的机制类似，但是可以延迟加载，并且线程安全，推荐使用。类的静态属性只会在第一次加载的时候被初始化，所以这是从JVM底层上保证了线程的安全性。 枚举public enum Singleton { INSTANCE; public void whateverMethod() { } }JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。 单例模式的优缺点优点系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。 缺点 单例模式一般没有接口，扩展很困难","categories":[],"tags":[]}],"categories":[],"tags":[]}