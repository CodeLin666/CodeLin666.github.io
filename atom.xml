<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晓琳</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://codelin666.github.io/"/>
  <updated>2020-07-19T06:41:43.119Z</updated>
  <id>https://codelin666.github.io/</id>
  
  <author>
    <name>晓琳</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA中实现Singleton模式</title>
    <link href="https://codelin666.github.io/2020/07/19/JAVA%E4%B8%AD%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F/"/>
    <id>https://codelin666.github.io/2020/07/19/JAVA%E4%B8%AD%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-07-19T06:42:00.084Z</published>
    <updated>2020-07-19T06:41:43.119Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="JAVA中实现Singleton模式"><a href="#JAVA中实现Singleton模式" class="headerlink" title="JAVA中实现Singleton模式"></a>JAVA中实现Singleton模式</h2><p>单例模式可以保证系统中，应用该模式的类一个类只有一个实例。即一个类只有一个对象实例。</p><h2 id="单例模式写法"><a href="#单例模式写法" class="headerlink" title="单例模式写法"></a>单例模式写法</h2><h3 id="双重检查Double-Check"><a href="#双重检查Double-Check" class="headerlink" title="双重检查Double-Check"></a>双重检查Double-Check</h3><pre><code>public class Singleton {private static volatile Singleton singleton;private Singleton() {}public static Singleton getInstance() {    if (singleton == null) {        synchronized (Singleton.class) {            if (singleton == null) {                singleton = new Singleton();            }        }    }    return singleton;    }    }</code></pre><p>volatile关键字千万不能掉，禁止指令重排序优化</p><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><pre><code>public class Singleton {private Singleton() {}private static class SingletonInstance {    private static final Singleton INSTANCE = new Singleton();}public static Singleton getInstance() {    return SingletonInstance.INSTANCE;}}</code></pre><p>这种方式跟饿汉式方式采用的机制类似，但是可以延迟加载，并且线程安全，推荐使用。类的静态属性只会在第一次加载的时候被初始化，所以这是从JVM底层上保证了线程的安全性。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><pre><code>public enum Singleton {INSTANCE;public void whateverMethod() {}}</code></pre><p>JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</p><h3 id="单例模式的优缺点"><a href="#单例模式的优缺点" class="headerlink" title="单例模式的优缺点"></a>单例模式的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p> 单例模式一般没有接口，扩展很困难</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;JAVA中实现Singleton模式&quot;&gt;&lt;a href=&quot;#JAVA中实现Singleton模式&quot; class=&quot;headerlink&quot; title=&quot;JAVA中实现Singleton模式&quot;&gt;&lt;/a&gt;JAVA中实现Singleton模式&lt;/h2&gt;&lt;p&gt;单
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
